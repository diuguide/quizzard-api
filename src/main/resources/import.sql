INSERT INTO roles (name) VALUES ('ROLE_USER');
INSERT INTO users (first_name, last_name, email) VALUES ('Alice', 'Anderson', 'aanderson@mail.com'); INSERT INTO users (first_name, last_name, email) VALUES ('Billy', 'Bob', 'bbob@mail.com'); INSERT INTO users (first_name, last_name, email) VALUES ('Charlie', 'Cain', 'ccain@mail.com'); INSERT INTO users (first_name, last_name, email) VALUES ('Daniel', 'Davids', 'ddavids@mail.com'); INSERT INTO users (first_name, last_name, email) VALUES ('Eric', 'Erikson', 'eerikson@mail.com'); INSERT INTO users (first_name, last_name, email) VALUES ('Sean', 'Taba', 'seantaba@gmail.com');
INSERT INTO accounts (username, password, points, user_id) VALUES ('aanderson', 'password', 0, 1); INSERT INTO accounts (username, password, points, user_id) VALUES ('bbob', 'password', 0, 2); INSERT INTO accounts (username, password, points, user_id) VALUES ('ccain', 'password', 0, 3); INSERT INTO accounts (username, password, points, user_id) VALUES ('ddavids', 'password', 0, 4); INSERT INTO accounts (username, password, points, user_id) VALUES ('eerikson', 'password', 0, 5); INSERT INTO accounts (username, password, points, user_id) VALUES ('seantaba', 'password', 10, 6);
INSERT INTO accounts_roles (account_id, role_id) VALUES (1, 1); INSERT INTO accounts_roles (account_id, role_id) VALUES (2, 1); INSERT INTO accounts_roles (account_id, role_id) VALUES (3, 1); INSERT INTO accounts_roles (account_id, role_id) VALUES (4, 1); INSERT INTO accounts_roles (account_id, role_id) VALUES (5, 1); INSERT INTO accounts_roles (account_id, role_id) VALUES (6, 1);

INSERT INTO subjects (name) VALUES ('OOP'); 
INSERT INTO subjects (name) VALUES ('Core Java'); 
INSERT INTO subjects (name) VALUES ('JUnit');
 INSERT INTO subjects (name) VALUES ('SQL'); 
 INSERT INTO subjects (name) VALUES ('Java Servlets'); 
 INSERT INTO subjects (name) VALUES ('Docker'); 
 INSERT INTO subjects (name) VALUES ('React'); 
 INSERT INTO subjects (name) VALUES ('Hibernate'); 
 INSERT INTO subjects (name) VALUES ('Spring'); 
 INSERT INTO subjects (name) VALUES ('SOAP'); 
 INSERT INTO subjects (name) VALUES ('REST'); 
 INSERT INTO subjects (name) VALUES ('Javascript');

INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Emphasize data rather than procedure. Model programs with objects. Data structures characterize the objects. Have methods that operate on the data objects. Abstraction. Polymorphism. Inheritance. Encapsulation.', true, 'Describe the characteristics of the object-oriented paradigm', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Inheritance, Abstraction, Polymorphism, Encapsulation', true, 'Pillars of OOP', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Hide unnecessary complexity, only showing what is necessary for the aspect being considered. Maintenance and code reusability.', true, 'Define Abstraction and provide advantages to using it', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Many forms. Objects can take on multiple forms. Code reusability.', true, 'Define Polymorphism and provide advantages to using it', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Classes can derive from other classes, creating parent-child relationships. Code reusability.', true, 'Define Inheritance and provide advantages to using it', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Data-hiding. Restricting access to the data of objects by setting accessor and mutator methods as necessary. Security and code reusability.', true, 'Define Encapsulation and provide advantages to using it', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Ad-hoc, Inclusion/Subtype, Parametric, Coercion.', true, 'What are some different types of polymorphism?', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Prototypal and class-based.', true, 'What are some different inheritance strategies?', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('The relationship where operations defined for supertypes to be safely substituted with subtypes', true, 'What is sub-type polymorphism?', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Usage of templates/interfaces that allow for the re-use of the same piece of code for different types', true, 'What is parametric polymorphism?', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Same name functions/methods may act differently through overloading.', true, 'What is ad hoc polymorphism?', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Prototypal is when objects are based on another object (done at runtime) and class-based is when classes are based on other classes (done at compile time).', true, 'What is the difference between class-based inheritance and prototypal inheritance?', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Single-Responsibility, Open-Closed, Liskov Substitution, Interface Segregation, Dependency Inversion.', true, 'What does the acronym SOLID stand for?', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Every class should have only one responsibility.', true, 'Describe the Single Responsibility Principal', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Classes should be open for extension but closed for modification.', true, 'Describe the Open/Closed Principal', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.', true, 'Describe the Liskov Substitution Principal', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Many client-specific interfaces are better than one general-purpose interface', true, 'Describe the Interface Segregation Principal', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Depend upon abstractions, not concretions.', true, 'Describe the Dependency Inversion Principal', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Don''t Repeat Yourself', true, 'What is the DRY Principal?', false, 1, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A type of programming language, it is based on the principal of Write Once, Run Anywhere.', true, 'What is Java?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Inheritance, Abstraction, Polymorphism, Encapsulation', true, 'Pillars of OOP', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Hide unnecessary complexity, only showing what is necessary for the aspect being considered.', true, 'Define Abstraction', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Many forms. Objects can take on multiple forms.', true, 'Define Polymorphism', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Classes can derive from other classes, creating parent-child relationships.', true, 'Define Inheritance', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Data-hiding. Restricting access to the data of objects by setting accessor and mutator methods as necessary.', true, 'Define Encapsulation', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Through interfaces and abstract classes.', true, 'In what way does Java employ abstraction?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Through compile-time polymorphism and run-time polymorphism.', true, 'In what way does Java employ polymorphism?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Through classes and interfaces where classes can each only extend a single class and classes/interfaces can each implement multiple interfaces.', true, 'In what way does Java employ inheritance?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('By defining access of fields and methods, and using getters/setters (accessors/mutators).', true, 'In what way does Java employ encapsulation?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Java Development Kit. Java Runtime Environment. Java Virtual Machine.', true, 'Describe the JDK, JRE, and the JVM', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('byte, short, int, long, float, double, boolean, char', true, 'List the Java primitive types', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Wrapper classes provide a way to use primitive data types as objects.', true, 'What are wrapper classes?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Autoboxing is the automatic conversion that the Java compiler makes between the primitive types and their corresponding object wrapper classes. Unboxing is the other way around.', true, 'What is autoboxing and unboxing?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Context-based: To create constant variables. To prevent overriding of methods. To prevent inheritance of classes.', true, 'What does the "final" keyword mean?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Context-based: Use the static variable for the property that is common to all objects. Use static methods for changing static variables. Both belong to the class rather than the object(s). Use static blocks for static initializations of a class. Use static nested classes which be instantiated without instantiating its outer class.', true, 'What does the "static" keyword mean?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Used when methods can take a variable-length of arguments, it is specified by three periods(…).', true, 'What are variable arguments?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Static scope. For non-static scope: class-level, method-levl, block-level', true, 'What are the scopes in which a variable can exist in - in Java?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('An object is the instantiation of a class.', true, 'What is the difference between an object and a class?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('For the instantiation of an object.', true, 'What is the "new" keyword used for?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Context-based but generally used to reference something (field, method, constructor) that pertains to the parent class.', true, 'What is the "super" keyword used for?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Context-based but generally used to reference something (field, method, constructor) that pertains to the current class.', true, 'What is the "this" keyword used for?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Executed at the time of the object''s creation, they are used to initialize the object’s state.', true, 'What is a constructor?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Use the == operator for reference comparison (address comparison) and the .equals() method for content comparison.', true, 'What is the difference between the == operator and .equals() method?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Object class acts as a root of inheritance hierarchy in any Java Program. It has some default methods that may need overriding.', true, 'What is the Object class''s function in the Java language?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Plain Ol'' Java Object', true, 'What is a POJO?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Multiple methods can have the same name with different parameters.', true, 'What is method overloading?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('When a child class to provide a specific implementation of a method that is already provided by its super-class.', true, 'What is method overriding?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Type casting is when you assign a value of one primitive data type to another type or one class to another', true, 'What is type casting?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Used to restrict the scope of a class, constructor, variable, method, or data member', true, 'What are access modifiers?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Public, protected, default(package-private), private', true, 'List the access modifiers from most visible to least visible', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Package-private is more restrictive. It does not allow for access by subclasses of a different package whereas protected does.', true, 'What is the difference in visibility between protected and package-private access level?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('static, final, abstract, synchronized, volatile', true, 'What are some non-access modifying keywords used in Java?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Multiple interfaces can be implemented by a class.', true, 'What is the difference between an interface and an abstract class?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('To call an object for Garbage Collection.', true, 'What is the purpose of the .finalize() method?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Only through interfaces.', true, 'Is multiple inheritance supported in Java?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Yes. Using the .finalize() method.', true, 'Can garbage collected be forced in Java?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A mechanism to encapsulate a group of classes, sub packages and interfaces, it is used for preventing naming conflicts and providing controlled access.', true, 'What are packages used for?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A way to access classes and interfaces which are present in any package.', true, 'What are imports?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A way to access the static members of a class directly without class name or any object', true, 'What are static imports?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('public static void main (String[] args)', true, 'What is the main method signature?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A group of like-typed variables that are referred to by a common name and accessed via index.', true, 'What is a primitive array?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('.length', true, 'What property of a Java primitive array tells us the size of the array?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('pass-by-value', true, 'Does Java employ "pass-by-value" or "pass-by-reference"?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('The decision-making statements (if, if-else, switch), the looping statements (for, while, do-while), and the branching statements (break, continue, return)', true, 'What are some constructs used in Java for flow control?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A do-while loop first executes and then checks the condition.', true, 'What is the difference between a while and a do-while loop?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('The for loop can loop through any container object, but the enhanced for loop can only interate through objects that implement Iterable.', true, 'What is the difference between a for loop and an enhanced for loop?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Logical AND (&&), logical OR (||)', true, 'What are short-circuit boolean operators?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A storage area in Java heap where string literals are stored by the JVM.', true, 'What is the String Pool?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('The String class is an immutable class whereas StringBuffer and StringBuilder classes are mutable. The StringBuffer is synchronized (thread-safe) but less efficient than StringBuilder.', true, 'What is the difference between String, StringBuilder, and StringBuffer?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Yes, because they are immutable.', true, 'Are Java Strings thread-safe? Why?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Using the ''new'' keyword', true, 'How can a String be created outside of the String Pool?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A method of storing only one copy of each distinct String Value, which must be immutable.', true, 'What is string interning?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('An error indicates serious problems that a reasonable application should not try to catch, while an exception indicates conditions that a reasonable application might want to catch.', true, 'What is the difference between an exception and an error in Java?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Checked exceptions are checked at compile time, while unchecked exceptions are checked at runtime.', true, 'What is the difference between a checked and an unchecked exception?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('When a program attempts to use an object reference that has a null value.', true, 'What causes a NullPointerException?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Using try-catch, try-catch-finally, or try with resources.', true, 'How can exceptions be handled in Java?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Run regardless of if an exceptionis thrown.', true, 'What is the purpose of the finally block?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('No, but consider yourself fired if you don''t.', true, 'Are you required to handle RuntimeExceptions?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Not in any order, go from specific to general.', true, 'Can exceptions be caught by multiple catch blocks in any order?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('An API which is used to examine or modify the behavior of methods, classes, interfaces at runtime.', true, 'What is reflection?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Constructors are used to initialize the object, not to create the object. All classes have a constructor.', true, 'Why do abstract classes have constructors?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('If it is defined: public, static, final', true, 'What modifying keywords are implicitly applied to variable members declared within an interface?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('An interface that contains only one abstract method.', true, 'What are functional interfaces?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('It is an empty interface (no field or methods).', true, 'What are marker interfaces?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Annotations are used to provide supplement information (metadata) about a program. They are not pure comments as they can change the way a program is treated by compiler.', true, 'What are annotations used for in Java?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Methods with implementations within interfaces that don''t have to affect the classes that implement the interface', true, 'What are default interface methods?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Interfaces/classes within the Collections API include Lists, Sets, and Queues.', true, 'Describe the core interface/class hierarchy of the Java Collections API', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A list allows duplicates, preserves insertion order and can have multiple nulls.', true, 'What is the difference between a List and a Set?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('FIFO', true, 'What are the characteristics of a Queue?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('LIFO', true, 'What are the characteristics of a Stack?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('An interface for mapping keys to values. It is not a part of the Collection API.', true, 'What is a Map? Are they considered to be a part of the Java Collection API?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('For random access of data.', true, 'When would you use an ArrayList over a LinkedList?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('For single-thread use.', true, 'When would you use an ArrayList over a Vector?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A TreeSet is sorted and does not allow nulls.', true, 'What is the difference between a HashSet and a TreeSet?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A queue only inserts at the end and removes from the beginning. A deque is a double-ended queue, allowing for both operations to be done on both sides.', true, 'What is the difference between a Queue and a Deque?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('HashMap is not synchronized. HashMap allows one null key and multiple null values whereas Hashtable doesn''t allow any null key or value.', true, 'What is the difference between a HashMap and a Hashtable?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('The main() method is static so that JVM can invoke it without instantiating the class.', true, 'Why is the main method declared static in Java?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Before', true, 'Does the logic in a static block member of a class run before or after the class''s constructor logic is called?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A line of execution within a program.', true, 'What is a thread in Java?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Extend the Thread class or implement the Runnable interface, instantiate the object and then call the .start() method.', true, 'How can you create a thread in Java?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('New, Runnable, Blocked, Waiting, Timed Waiting, Terminated', true, 'What are the states of a thread?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('When a program calls the .start() method, a new thread is created and then the .run() method is executed. But if we directly call the run() method then no new thread will be created.', true, 'What is the difference between the .run() and .start() methods?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('It allows only one thread to execute at any given time.', true, 'What is the keyword "synchronized" used for?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('When multiple threads need the same locks but obtain them in different order. The synchronized keyword caused the executing thread to block while waiting for the lock, or monitor, associated with the specified object.', true, 'What causes a deadlock?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('When working with threads, it allows one thread to wait until another thread completes its execution.', true, 'What is the function of the .join() method?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Only one instance of the class is created in the complete execution of a program or project. Singleton classes are used for logging, driver objects, caching and thread pool, database connections.', true, 'Describe the characteristics and application of the singleton design pattern', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Defer the instantiation of a class to one or more concrete subclasses. Good for creating an object where object creation logic is hidden to the client.', true, 'Describe the characteristics and application of the factory design pattern', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Similar to methods, but they do not need a name and they can be implemented right in the body of a method.', true, 'What is a lambda expression?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A lambda expression is a method without a name used in tandem with a functional interface, but a local anonymous class is a class without a name.', true, 'What are the differences between a lambda expression and a local anonymous class?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('While they can be used in many overlapping instances, lamda expressions are not replacements to local anonymous classes... not always, at least.', true, 'Are lambda expressions replacements to local anonymous classes?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('An interface that contains only one abstract method.', true, 'What is a functional interface?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('No, but it is recommended.', true, 'Is the @FunctionalInterface annotation required to denote a functional interface?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Runnable, ActionListener, Comparable', true, 'What are some examples of functional interfaces?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A compact and easy form (shorthand syntax) of lambda expression. lambdaExpressionFunctionName(variableName, TaskClassName::taskFunctionName;', true, 'What are method references? Describe their syntax.', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Static methods, instance methods of a particular object, instance methods of an arbitrary object of a particular type, and constructors.', true, 'What kinds of methods can be referenced using method references?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Methods with implementations within interfaces that don''t have to affect the classes that implement the interface.', true, 'What is a default method, and why should you use them?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Since Java 8', true, 'When was the java.util.function package introduced?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Runnable, Predicate, Function, Supplier, and Consumer', true, 'What are the main types of functional interfaces?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('public T get()', true, 'What is the method signature of the abstract method in the Supplier interface?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('public void accept(T t)', true, 'What is the method signature of the abstract method in the Consumer interface?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Using .and() and .or() methods', true, 'How would you go about composing/combining multiple Consumers together?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('public boolean test(T t)', true, 'What is the method signature of the abstract method in the Predicate interface?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('.and() .or() .negate() .isEqual()', true, 'What are the default methods of the Predicate interface?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('public R apply(T t)', true, 'What is the method signature of the abstract method in the Function interface?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A functional interface which represents a function that takes in two arguments and produces a result.', true, 'What is a BiFunction?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('IntSupplier is for the primitive int while Supplier<Integer> is for the Wrapper Integer', true, 'When should you use IntSupplier versus Supplier<Integer>?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A Stream is a fixed data structure, in which the elements are computed on demand. The Stream API is used to process collections of objects to produce the desired result.', true, 'What is a Stream and how is it different than a Collection?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('They (1) lazily executed and (2) return a stream as a result: .map() .filter() .sorted', true, 'What are intermediate Stream operations? Name a few.', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('They mark the end of the stream and return the result: .collect() .foreach() .reduce()', true, 'What are terminal Stream operations? Name a few.', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Used when we want to convert a Stream of X to Stream of Y. Parameter: A function.', true, 'What is the function of Stream#map, what does it take as a parameter?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Used to return a new stream consisting of the elements that match the given predicate. Parameter: A predicate', true, 'What is the function of Stream#filter, what does it take as a parameter?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Used to derive a single value from a collection of values, it''s an all-purpose version of sum(), min(), max(), count() etc. Parameters: T identity, BinaryOperator<T> accumulator', true, 'What is the function of Stream#reduce, what does it take as a parameter?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Used when one input is expected to have many outputs and we want to convert a stream of input X to a flattened group of Y outputs.', true, 'What is the function of Stream#flatMap, what does it take as a parameter?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Stream#map has a one-to-one mapping between input and output, whereas Stream#flatMap has a one-to-many mapping between input and output (which gets flattened into a single output).', true, 'Articulate the difference between Stream#map and Stream#flatMap.', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('No.', true, 'Do Stream operations manipulate the collection being streamed?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Use Arrays.stream() or Stream.of()', true, 'How can you convert an array into a Stream?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('A container object which may or may not contain a non-null value.', true, 'What is an Optional?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('Use one of the following static methods: Optional.empty(), Optional.of(), Optional.ofNullable()', true, 'What are some ways of making Optional objects, since its constructor is declared as private?', false, 2, 1);
INSERT INTO cards (answer, PUBLIC, question, reviewable, subject_id, account_id) VALUES ('It is an open-source testing framework for java programmers.', true, 'What is JUnit?', false, 3, 1);

INSERT INTO sets (PUBLIC, name) VALUES (true, 'Javascript - Core Java'), (true, 'React - Redux'), (true, 'Javascript - React'), (true, 'Hibernate - Spring'), (true, 'Docker - REST');
INSERT INTO sets_cards (set_id, card_id) VALUES (1, 25), (1, 34), (1, 131), (1, 137), (1, 135), (1, 100), (2, 101), (2, 102), (2, 103), (2, 104); 
INSERT INTO sets_cards (set_id, card_id) VALUES (2, 105), (2, 106), (3, 88), (3, 87), (3, 81), (3, 75), (3, 21), (3, 11), (4, 25), (4, 38); 
INSERT INTO sets_cards (set_id, card_id) VALUES (4, 33), (4, 28), (4, 29), (4, 30), (5, 21), (5, 22), (5, 14), (5, 37), (5, 38), (5, 39);
